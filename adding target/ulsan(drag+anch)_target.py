# -*- coding: utf-8 -*-
"""ulsan(drag+anch)_target (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Japgg_nxFHsglmLmAWDUONzYW9J33bTm
"""

from google.colab import drive
drive.mount('/content/gdrive/')

import pandas as pd
import numpy as np
from datetime import datetime
import time

#df_drag
df_drag = pd.read_csv('/content/gdrive/MyDrive/2023날씨빅콘/anch,drag데이터 합치기 및 target 넣기 & 기상데이터 붙이기/ulsan_drag_stn.csv', index_col = 0)
df_ans = pd.read_csv('/content/gdrive/MyDrive/2023날씨빅콘/anch,drag데이터 합치기 및 target 넣기 & 기상데이터 붙이기/ulsan_answer2 (1).csv', index_col = 0)

"""# drag데이터 날짜 시계열로 바꾸기"""

# 'ulsan_drag_train_final.time' 컬럼의 작은 따옴표('') 삭제
df_drag['ulsan_drag_train_final.time'] = df_drag['ulsan_drag_train_final.time'].str.replace('"', '')

df_drag.reset_index(drop=True, inplace=True)

"""# ans데이터 시계열 컬럼인['ulsan_drag_train_final.time'] 만들고 ['target] 변수 생성"""

df_ans['ulsan_drag_train_final.time'] = df_ans['ulsan_answer.year'].astype(str) + '-' + df_ans['ulsan_answer.mon'].astype(str) + '-' + df_ans['ulsan_answer.day'].astype(str)+ ' ' + df_ans['ulsan_answer.hour'].astype(str)+ ':' + df_ans['ulsan_answer.min'].astype(str)

df_ans['ulsan_drag_train_final.time'] = pd.to_datetime(df_ans['ulsan_drag_train_final.time'])

df_ans['target'] = 0

df_ans.reset_index(drop=True, inplace=True)

# df_ans의 필요한 컬럼인 ulsan_drag_train_final.time, ulsan_answer.num, target 만 추출
df_ans = df_ans[['ulsan_drag_train_final.time', 'ulsan_answer.num', 'target']]

# df_drag와 조인하기 위해 df_ans 컬럼명을 df_drag명과 맞춰주기
df_ans = df_ans.rename(columns={'ulsan_answer.num': 'ulsan_drag_train_final.num'})

# 총 163개의 배의 닻끌림 인지 시각 확인
df_ans

# 두 데이터가 시간이 하나는 분까지 하나는 초까지로 나누어져 있다
# 새로운 timestamp라는 변수를 만들어 분까지로 맞춰지는 변수를 생성
df_drag['timestamp'] = pd.to_datetime(df_drag['ulsan_drag_train_final.time']).dt.strftime('%Y-%m-%d %H:%M')
df_ans['timestamp'] = pd.to_datetime(df_ans['ulsan_drag_train_final.time']).dt.strftime('%Y-%m-%d %H:%M')

r = df_drag.merge(df_ans, on=['ulsan_drag_train_final.num', 'timestamp'], how='left')
r

r = r.loc[r['target'] == 0]
r

# 위에 데이터프레임에서 ulsan_drag_train_final.num컬럼에서 가장 첫번째만 0으로 나머지는 nan값
r['target'] = np.where(r.duplicated(subset='ulsan_drag_train_final.num', keep='first'), np.nan, 0)

r

# 타겟인 0값인 것만 추출
r.loc[r['target'] == 0]

r = r[['target']]
r

# 위에 r값과 df_drag를 인덱스를 기준으로 left조인하기
# 그전에 df_drag 인덱스번호를 맞추기 위해 인덱스 reset후 진행
# df_drag = df_drag.reset_index(drop=True)
df_drag

merged_index = pd.merge(df_drag, r, left_index=True, right_index=True, how='left')

merged_index

# target이 0인 행을 기준으로 +-30분씩 인 target을 1로 채워주기
merged_index['ulsan_drag_train_final.time'] = pd.to_datetime(df_drag['ulsan_drag_train_final.time'], format="%Y-%m-%d %H:%M")
from datetime import timedelta
for i, row in merged_index.iterrows():
    if row['target'] == 0:
        timestamp = row['ulsan_drag_train_final.time']
        start_time = timestamp - timedelta(minutes=31)
        end_time = timestamp + timedelta(minutes=31)
        targets = merged_index[(merged_index['ulsan_drag_train_final.time'] > start_time) & (merged_index['ulsan_drag_train_final.time'] < end_time)]
        merged_index.loc[targets.index, 'target'] = 1

# 1이 아닌 나머지에 0값 대입
df_drag_target = merged_index.fillna(0)

#발생14421 / 미발생204191
df_drag_target['target'].value_counts()

df_drag_target

df_drag_target.loc[df_drag_target['ulsan_drag_train_final.time'] == '2021-02-15 18:11:36']

#df_anch
ulsan_merged = pd.read_csv('/content/gdrive/MyDrive/2023날씨빅콘/울산 anch,drag에 정박지 붙인거/ulsan_all_stn_target.csv', index_col = 0)
ulsan_merged

# 'ulsan_anch_train_final.time' 컬럼의 작은 따옴표('') 삭제
df_anch['ulsan_anch_train_final.time'] = df_anch['ulsan_anch_train_final.time'].str.replace('"', '')

df_anch['ulsan_anch_train_final.time'] = pd.to_datetime(df_anch['ulsan_anch_train_final.time'])

# df_anch에 없는 timestamp추가
df_anch['timestamp'] = pd.to_datetime(df_anch['ulsan_anch_train_final.time']).dt.strftime('%Y-%m-%d %H:%M')

df_anch['target'] = 0

df_anch

df_anch.info()

df_drag_target.info()

# anch와 drag 시계열 컬럼 이름 맞추기
df_anch = df_anch.rename(columns={'ulsan_anch_train_final.num': 'ulsan_drag_train_final.num','ulsan_anch_train_final.time':'ulsan_drag_train_final.time','ulsan_anch_train_final.latitude':'ulsan_drag_train_final.latitude','ulsan_anch_train_final.longitude':'ulsan_drag_train_final.longitude','ulsan_anch_train_final.sog':'ulsan_drag_train_final.sog','ulsan_anch_train_final.cog':'ulsan_drag_train_final.cog','ulsan_drag_train_final.hdg':'ulsan_drag_train_final.hdg'})

df_anch.info()

df_drag_target.info()

merged_df = pd.concat([df_drag_target, df_anch], axis=0)

merged_df.info()

ulsan_merged = merged_df.sort_values('ulsan_drag_train_final.time', ascending=True)

ulsan_merged.reset_index(drop=True, inplace=True)

df_ans

ulsan_merged.loc[(ulsan_merged['target'] == 1) &(ulsan_merged['ulsan_drag_train_final.num'] == 1)	]

ulsan_merged.loc[ulsan_merged['ulsan_drag_train_final.time'] >= '2021-02-15 19:11:00']

"""anch + drag = ulsan_merged"""

ulsan_merged

"""파고부이"""

#울산
#간절곶 =gan
gan_lat =  35.366944
gan_lon = 129.375000
gan = (gan_lon, gan_lat)
#당사 = dang
dang_lat = 35.577778
dang_lon = 129.502778
dang = (dang_lon, dang_lat)

#lat format
llist = ['0','1','2','3','4','5','6','7','8','9','.']
indi= []
lat_list = []
for i in ulsan_merged['ulsan_drag_train_final.latitude']:
  for j in i:
    if j in llist:
      indi.append(j)
  lat_list.append(indi)
  indi = []



# long format
longi_list= []
for i in ulsan_merged['ulsan_drag_train_final.longitude']:
  for j in i:
    if j in llist:
      indi.append(j)
  longi_list.append(indi)
  indi = []

longi_list = [float(''.join(longi)) for longi in longi_list]

count = 0
for i in range(len(lat_list)):
  for j in lat_list[i]:
    if j == '.':
      count = count +1
  if count >= 2:
    lat_list[i] = ['3', '5', '.', '4', '5', '9', '9']
  count = 0

lat_list = [float(''.join(lat)) for lat in lat_list]

coor_list = []
for i in zip(longi_list,lat_list):
  coor_list.append(i)

import math

dis_list=[]
for i in coor_list:
  #배와 당사까지 거리
  x_dang = (i[0] - dang[0])**2
  y_dang = (i[1]-dang[1])**2
  dis_dang = math.sqrt(x_dang + y_dang)
  #배와 간절곶까지 거리
  x_gan = (i[0] - gan[0])**2
  y_gan = (i[1]-gan[1])**2
  dis_gan = math.sqrt(x_gan + y_gan)
  if dis_dang > dis_gan:
    dis_list.append('당사')
  elif dis_gan > dis_dang:
    dis_list.append('간절곶')
  else:
    dis_list.append('same')

from collections import Counter
Counter(dis_list)

ulsan_merged['kma_pagobuoy_train.stn_name'] = dis_list

ulsan_merged

pago_buoy = pd.read_csv('/content/gdrive/MyDrive/2023날씨빅콘/pago_train.csv', index_col = 0)
pago_buoy

ulsan_pago_buoy=pago_buoy.loc[(pago_buoy['kma_pagobuoy_train.stn_name'] == '당사')|(pago_buoy['kma_pagobuoy_train.stn_name'] == '간절곶')]

ulsan_pago_buoy

from datetime import datetime

pago_date_list = ulsan_pago_buoy['kma_pagobuoy_train.yyyymmddhhmi']
pago_date_list = pago_date_list.to_list()
pago_date_list = list(map(str,pago_date_list))

date_format = "%Y%m%d%H"

pago_list = []
for i in pago_date_list:
    year = i[0:4]
    month = i[4:6]
    day = i[6:8]
    hour = i[8:10]
    pago_list.append((year, month, day, hour))

merged_date_list = ulsan_merged['ulsan_drag_train_final.time']
merged_date_list = merged_date_list.to_list()
merged_date_list = list(map(str,merged_date_list))

date_format = "%Y-%m-%d %H:%M:%S"

merged_list = []
for i in merged_date_list:
    year = i[0:4]
    month = i[5:7]
    day = i[8:10]
    hour = i[11:13]
    merged_list.append((year, month, day, hour))

ulsan_pago_buoy['time'] = pago_list
ulsan_merged['time'] = merged_list

merged_df = pd.merge(ulsan_merged,ulsan_pago_buoy,on=['time','kma_pagobuoy_train.stn_name'],how='left')

merged_df

merged_df = merged_df.drop(columns=['time','kma_pagobuoy_train.yyyymmddhhmi'])

merged_df = merged_df.drop(columns=['timestamp'])

merged_df

